apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: xenclaves.aws.infra.bigbang.dev
  labels:
    provider: aws
spec:
  compositeTypeRef:
    apiVersion: infra.bigbang.dev/v1alpha1
    kind: XEnclave
  resources:
    - name: vpc
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: VPC
        metadata:
          labels:
            type: vpc
            internalName: vpc
        spec:
          forProvider:
            cidrBlock: "10.0.0.0/16"
            enableDnsHostNames: true
            enableDnsSupport: true
      patches:
        - fromFieldPath: "spec.parameters.region"
          toFieldPath: "spec.forProvider.region"
    - name: public-subnet-a
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: Subnet
        metadata:
          labels:
            type: subnet
            visibility: public
            internalName: public-subnet-a
        spec:
          forProvider:
            cidrBlock: "10.0.0.0/20"
            mapPublicIPOnLaunch: true
            vpcIdSelector:
              matchControllerRef: true
      patches:
        - fromFieldPath: "spec.parameters.availabilityZone1"
          toFieldPath: "spec.forProvider.availabilityZone"
        - fromFieldPath: "spec.parameters.region"
          toFieldPath: "spec.forProvider.region"
    - name: public-subnet-b
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: Subnet
        metadata:
          labels:
            type: subnet
            visibility: public
            internalName: public-subnet-b
        spec:
          forProvider:
            cidrBlock: "10.0.16.0/20"
            mapPublicIPOnLaunch: true
            vpcIdSelector:
              matchControllerRef: true
      patches:
        - fromFieldPath: "spec.parameters.availabilityZone2"
          toFieldPath: "spec.forProvider.availabilityZone"
        - fromFieldPath: "spec.parameters.region"
          toFieldPath: "spec.forProvider.region"
    - name: public-subnet-c
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: Subnet
        metadata:
          labels:
            type: subnet
            visibility: public
            internalName: public-subnet-c
        spec:
          forProvider:
            cidrBlock: "10.0.32.0/20"
            mapPublicIPOnLaunch: true
            vpcIdSelector:
              matchControllerRef: true
      patches:
        - fromFieldPath: "spec.parameters.availabilityZone3"
          toFieldPath: "spec.forProvider.availabilityZone"
        - fromFieldPath: "spec.parameters.region"
          toFieldPath: "spec.forProvider.region"
    - name: private-subnet-a
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: Subnet
        metadata:
          labels:
            type: subnet
            visibility: private
            internalName: private-subnet-a
        spec:
          forProvider:
            cidrBlock: "10.0.128.0/20"
            mapPublicIPOnLaunch: false
            vpcIdSelector:
              matchControllerRef: true
      patches:
        - fromFieldPath: "spec.parameters.availabilityZone1"
          toFieldPath: "spec.forProvider.availabilityZone"
        - fromFieldPath: "spec.parameters.region"
          toFieldPath: "spec.forProvider.region"
    - name: private-subnet-b
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: Subnet
        metadata:
          labels:
            type: subnet
            visibility: private
            internalName: private-subnet-b
        spec:
          forProvider:
            cidrBlock: "10.0.144.0/20"
            mapPublicIPOnLaunch: false
            vpcIdSelector:
              matchControllerRef: true
      patches:
        - fromFieldPath: "spec.parameters.availabilityZone2"
          toFieldPath: "spec.forProvider.availabilityZone"
        - fromFieldPath: "spec.parameters.region"
          toFieldPath: "spec.forProvider.region"
    - name: private-subnet-c
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: Subnet
        metadata:
          labels:
            type: subnet
            visibility: private
            internalName: private-subnet-c
        spec:
          forProvider:
            cidrBlock: "10.0.160.0/20"
            mapPublicIPOnLaunch: false
            vpcIdSelector:
              matchControllerRef: true
      patches:
        - fromFieldPath: "spec.parameters.availabilityZone3"
          toFieldPath: "spec.forProvider.availabilityZone"
        - fromFieldPath: "spec.parameters.region"
          toFieldPath: "spec.forProvider.region"
    - name: dbsubnetgroup
      base:
        apiVersion: database.aws.crossplane.io/v1beta1
        kind: DBSubnetGroup
        metadata:
          labels:
            type: dbsubnetgroup
            internalName: dbsubnetgroup
        spec:
          forProvider:
            description: "Subnet group for databases"
            subnetIdSelector:
              matchLabels:
                type: subnet
                visibility: private
            # subnetIdRefs:
            #   - name: "private-subnet-a"
            #   - name: "private-subnet-b"
            #   - name: "private-subnet-c"
      patches:
        - fromFieldPath: "spec.parameters.region"
          toFieldPath: "spec.forProvider.region"
    - name: internetgateway
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: InternetGateway
        metadata:
          labels:
            type: internetgateway
            internalName: internetgateway
        spec:
          forProvider:
            vpcIdSelector:
              matchControllerRef: true
      patches:
        - fromFieldPath: "spec.parameters.region"
          toFieldPath: "spec.forProvider.region"
    - name: natgateway-eip
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: Address
        metadata:
          labels:
            type: eip
            internalName: natgateway-eip
        spec:
          forProvider:
            domain: "vpc"
      patches:
        - fromFieldPath: "spec.parameters.region"
          toFieldPath: "spec.forProvider.region"
    - name: natgateway
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: NATGateway
        metadata:
          labels:
            type: natgateway
            internalName: natgateway
        spec:
          forProvider:
            allocationIdSelector:
              matchLabels:
                type: eip
                internalName: natgateway-eip
            subnetIdSelector:
              matchLabels:
                type: subnet
                internalName: "public-subnet-a"
            # subnetIdRef:
            #   name: "public-subnet-a"
      patches:
        - fromFieldPath: "spec.parameters.region"
          toFieldPath: "spec.forProvider.region"
    - name: routetable-public
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: RouteTable
        metadata:
          labels:
            type: routetable
            internalName: routetable-public
        spec:
          forProvider:
            ignoreRoutes: true
            associations:
              - subnetIdSelector:
                  matchLabels:
                    type: subnet
                    internalName: "public-subnet-a"
              - subnetIdSelector:
                  matchLabels:
                    type: subnet
                    internalName: "public-subnet-b"
              - subnetIdSelector:
                  matchLabels:
                    type: subnet
                    internalName: "public-subnet-c"
              # - subnetIdRef:
              #     name: "public-subnet-a"
              # - subnetIdRef:
              #     name: "public-subnet-b"
              # - subnetIdRef:
              #     name: "public-subnet-c"
            vpcIdSelector:
              matchControllerRef: true
      patches:
        - fromFieldPath: "spec.parameters.region"
          toFieldPath: "spec.forProvider.region"
    - name: route-routetable-public-1
      base:
        apiVersion: ec2.aws.crossplane.io/v1alpha1
        kind: Route
        metadata:
          labels:
            type: route
            internalName: route-routetable-public-1
        spec:
          forProvider:
            destinationCIDRBlock: "0.0.0.0/0"
            gatewayIdSelector:
              matchLabels:
                type: internetgateway
                internalName: internetgateway
            routeTableIdSelector:
              matchLabels:
                type: routetable
                internalName: routetable-public
            # routeTableIdRef:
            #   name: "routetable-public"
      patches:
        - fromFieldPath: "spec.parameters.region"
          toFieldPath: "spec.forProvider.region"
    - name: routetable-private-a
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: RouteTable
        metadata:
          labels:
            type: routetable
            visibility: private
            internalName: routetable-private-a
        spec:
          forProvider:
            ignoreRoutes: true
            associations:
              - subnetIdSelector:
                  matchLabels:
                    type: subnet
                    internalName: "private-subnet-a"
              # - subnetIdRef:
              #     name: "private-subnet-a"
            vpcIdSelector:
              matchControllerRef: true
      patches:
        - fromFieldPath: "spec.parameters.region"
          toFieldPath: "spec.forProvider.region"
    - name: route-routetable-private-a-1
      base:
        apiVersion: ec2.aws.crossplane.io/v1alpha1
        kind: Route
        metadata:
          labels:
            type: route
            internalName: route-routetable-private-a-1
        spec:
          forProvider:
            destinationCIDRBlock: "0.0.0.0/0"
            natGatewayIdSelector:
              matchLabels:
                type: natgateway
                internalName: "natgateway"
            # natGatewayIdRef:
            #   name: "natgateway"
            routeTableIdSelector:
              matchLabels:
                type: routetable
                internalName: routetable-private-a
            # routeTableIdRef:
            #   name: "routetable-private-a"
      patches:
        - fromFieldPath: "spec.parameters.region"
          toFieldPath: "spec.forProvider.region"
    - name: routetable-private-b
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: RouteTable
        metadata:
          labels:
            type: routetable
            visibility: private
            internalName: routetable-private-b
        spec:
          forProvider:
            ignoreRoutes: true
            associations:
              - subnetIdSelector:
                  matchLabels:
                    type: subnet
                    internalName: "private-subnet-b"
              # - subnetIdRef:
              #     name: "private-subnet-b"
            vpcIdSelector:
              matchControllerRef: true
      patches:
        - fromFieldPath: "spec.parameters.region"
          toFieldPath: "spec.forProvider.region"
    - name: route-routetable-private-b-1
      base:
        apiVersion: ec2.aws.crossplane.io/v1alpha1
        kind: Route
        metadata:
          labels:
            type: route
            internalName: route-routetable-private-b-1
        spec:
          forProvider:
            destinationCIDRBlock: "0.0.0.0/0"
            natGatewayIdSelector:
              matchLabels:
                type: natgateway
                internalName: "natgateway"
            # natGatewayIdRef:
            #   name: "natgateway"
            routeTableIdSelector:
              matchLabels:
                type: routetable
                internalName: routetable-private-b
            # routeTableIdRef:
            #   name: "routetable-private-b"
      patches:
        - fromFieldPath: "spec.parameters.region"
          toFieldPath: "spec.forProvider.region"
    - name: routetable-private-c
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: RouteTable
        metadata:
          labels:
            type: routetable
            visibility: private
            internalName: routetable-private-c
        spec:
          forProvider:
            ignoreRoutes: true
            associations:
              - subnetIdSelector:
                  matchLabels:
                    type: subnet
                    internalName: "private-subnet-c"
              # - subnetIdRef:
              #     name: "private-subnet-c"
            vpcIdSelector:
              matchControllerRef: true
      patches:
        - fromFieldPath: "spec.parameters.region"
          toFieldPath: "spec.forProvider.region"
    - name: route-routetable-private-c-1
      base:
        apiVersion: ec2.aws.crossplane.io/v1alpha1
        kind: Route
        metadata:
          labels:
            type: route
            internalName: route-routetable-private-c-1
        spec:
          forProvider:
            destinationCIDRBlock: "0.0.0.0/0"
            natGatewayIdSelector:
              matchLabels:
                type: natgateway
                internalName: "natgateway"
            # natGatewayIdRef:
            #   name: "natgateway"
            routeTableIdSelector:
              matchLabels:
                type: routetable
                internalName: routetable-private-c
            # routeTableIdRef:
            #   name: "routetable-private-c"
      patches:
        - fromFieldPath: "spec.parameters.region"
          toFieldPath: "spec.forProvider.region"
    - name: vpc-endpoint-s3
      base:
        apiVersion: ec2.aws.crossplane.io/v1alpha1
        kind: VPCEndpoint
        metadata:
          labels:
            type: vpc-endpoint
            internalName: vpc-endpoint-s3
        spec:
          forProvider:
            routeTableIdSelector:
              matchLabels:
                type: routetable
                visibility: private
            # routeTableIdRefs:
            #   - name: "routetable-private-a"
            #   - name: "routetable-private-b"
            #   - name: "routetable-private-c"
            vpcIdSelector:
              matchControllerRef: true
            serviceName: "s3"
      patches:
        - fromFieldPath: "spec.parameters.region"
          toFieldPath: "spec.forProvider.region"
